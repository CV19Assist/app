name: Deploy

on:
  push:
    branches:
      - master
      - production

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 10

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache npm dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        env:
          CI: true
          CYPRESS_INSTALL_BINARY: 0 # Skip install of Cypress (handled in its own job)
          HUSKY_SKIP_INSTALL: 1 # Skip install of Husky
        run: |
          yarn install --frozen-lockfile
          yarn --cwd functions install --frozen-lockfile

      - name: Verify App
        run: |
          yarn lint # Check for lint in app code
          yarn build # Build app bundles

      - name: Verify Functions
        run: |
          yarn --cwd functions test:cov # Run unit tests with coverage
          yarn --cwd functions build

      - name: Archive Build Artifact
        uses: actions/upload-artifact@master
        with:
          name: build
          path: build

      - name: Archive Functions Artifact
        uses: actions/upload-artifact@master
        with:
          name: functions-build
          path: functions/dist

      - name: Deploy to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: |
          $(yarn bin)/firebase-ci deploy -s

      - name: Archive Debug Log
        uses: actions/upload-artifact@master
        if: failure()
        with:
          name: firebase-debug
          path: firebase-debug.log

      # Write new version to core database (causes client to refresh)
      - name: Update Version In Database
        if: success()
        run: |
          packageName=$(cat package.json | jq -r '.name')
          packageVersion=$(cat package.json | jq -r '.version')
          gcloudProject=$(cat .firebaserc | jq -r --arg alias "$projectAlias" '.projects[$alias] // .projects.default')

          echo Updating DB path \"/versionInfo/${packageName}/current\" value to version \"$packageVersion\"

          $(yarn bin)/firebase database:update \
            -d "$(jq -n --arg version "$packageVersion" '{current: $version}')" \
            -y --project $gcloudProject \
            "/versionInfo/${packageName}"
